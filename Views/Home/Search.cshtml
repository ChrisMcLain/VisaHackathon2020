@model SearchModel
@using VisaHackathon2020.Giveback

<div class="text-center m-3 mt-5 pl-5 pr-5">
    <h1 class="display-4">Find and support local businesses<br/>with Visa Giveback</h1>
    <p class="text-muted">
        Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        Lorem ipsum dolor sit amet, consectetur adipiscing elit.
        Lorem ipsum dolor sit amet, consectetur adipiscing elit.
    </p>
</div>

<hr/>

@* Obviously this needs better styling to match design docs but its a start *@
<ul class="nav nav-pills justify-content-center mb-3" id="pills-tab" role="tablist">
    <li class="nav-item" role="presentation">
        <a class="nav-link nav-link-visa @(Model.LocalSearch ? "active" : "")" id="pills-local-tab" data-toggle="pill" href="#pills-local">Help Your Neighborhood</a>
    </li>
    <li class="nav-item" role="presentation">
        <a class="nav-link nav-link-visa @(Model.ExpandedSearch ? "active" : "")" id="pills-global-tab" data-toggle="pill" href="#pills-global">Expand Your Horizons</a>
    </li>
</ul>

<div class="tab-content pr-5 pl-5" id="pills-tabContent">
    <div class="tab-pane fade show active" id="pills-local" role="tabpanel" aria-labelledby="pills-local-tab">

        <!-- HELP YOUR NEIGHBORHOOD TAB -->

        <form action="@Url.Action("Search", "Home")">
            <div class="input-group">
                <select multiple id="category-selector" name="category" class="selectpicker show-tick form-control" 
                        data-live-search="true" title="Select a Category" onclick="validateForm()">
                    @foreach (var category in MerchantCategoryService.Categories.OrderBy(n => n.Name))
                    {
                        var selected = category.Id > 0 && Model.Category != null && Model.Category.Contains(category.Id);
                        <!option value="@category.Id" @(selected ? "selected" : "")>@category.Name.ToTitleCase()</!option>
                    }
                </select>
                <div class="input-group-append">
                    <button class="btn btn-light" id="locate-button" type="button" onclick="requestLocation()">
                        <i class="fa fa-compass"></i>
                        <span id="location-name">
                            <span class="text-muted">Locate me</span>
                        </span>
                    </button>
                    
                    <input type="hidden" id="search-latitude"  name="lat" value="@Model.Latitude">
                    <input type="hidden" id="search-longitude" name="lng" value="@Model.Longitude">

                    @*<select class="selectpicker" multiple title="Financial Struggle Level">
                        <option class="text-danger">Red</option>
                        <option class="text-warning">Yellow</option>
                        <option class="text-success">Green</option>
                    </select>*@
                    
                    <button id="search-button" class="btn btn-visa" type="submit" data-toggle="tooltip" title="Search">
                        <i class="fas fa-search"></i>
                    </button>
                </div>
            </div>
        </form>
    </div>
    <div class="tab-pane fade" id="pills-global" role="tabpanel" aria-labelledby="pills-global-tab">
        B
    </div>
</div>

<script>
function requestLocation() {
    if(navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(onLocationFound, onLocationError)
    } else {
        alert('Your browser does not support geolocation.');
        $('#location-name').text('Not supported');
        $('#locate-button').addClass('text-danger');
    }
}

function onLocationFound(position) {
    $('#location-name').text('Using your location');
    $('#locate-button').addClass('text-visa');
    
    $('#search-latitude').prop('value', position.coords.latitude);
    $('#search-longitude').prop('value', position.coords.longitude);
    validateForm();
}

function onLocationError() {
    $('#location-name').text('Unknown');
    $('#locate-button').addClass('text-danger');
    validateForm();
}

function validateForm() {
    var valid = true;
    
    if($("#mySelectBox option:selected").length) valid = false;
    if(!$("#search-latitude").val()) valid = false;
    if(!$("#search-longitude").val()) valid = false;
    
    $('#search-button').prop('disabled', !valid);
}
</script>

<div class="row mt-3">
    @if (Model.HasResults)
    {
        <div class="col-md-4 overflow-auto w-100" style="height: 500px">
            @foreach (var business in Model.Response.Response)
            {
                <div id="merchant-button-@business.ResponseValues.VisaStoreId" class="merchant-button card mb-1"
                     onclick="selectMerchant({
                        latitude: @business.ResponseValues.LocationAddressLatitude, 
                        longitude: @business.ResponseValues.LocationAddressLongitude},
                        @business.ResponseValues.VisaStoreId)">

                    <div class="card-body">
                        <strong>@business.ResponseValues.VisaMerchantName</strong>
                        <p class="text-muted">
                            @business.ResponseValues.MerchantStreetAddress
                        </p>
                        <button class="btn btn-sm btn-outline-visa-orange">Learn more</button>
                        <button class="btn btn-sm btn-visa">Donate</button>
                    </div>
                </div>
            }
        </div>
        <div id="map" class="col-md-8 rounded" style="height: 500px"></div>
        <script>
        function initMap() {
            const mapOptions = {
                center: new google.maps.LatLng(@Model.Latitude, @Model.Longitude),
                zoom: 11,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            };
            
            window.map = new google.maps.Map(document.getElementById('map'), mapOptions);
            
            @foreach (var business in Model.Response.Response)
            {
                Console.WriteLine("business " + business.ResponseValues.MerchantCity);
                @Html.Raw("new google.maps.Marker({position:{lat:" + business.ResponseValues.LocationAddressLatitude 
                         + ",lng:" + business.ResponseValues.LocationAddressLongitude + "}, map:window.map});\n");
            }
        }
        
        function selectMerchant(coordinates, storeId) {
            $('.merchant-button').removeClass('border-visa');
            $('#merchant-button-' + storeId).addClass('border-visa');
            moveMap(coordinates);
        }
        
        function moveMap(coordinates) {
            const location = new google.maps.LatLng(coordinates.latitude, coordinates.longitude);
            window.map.panTo(location);
            window.map.setZoom(15);
        }
        </script>
        <script async defer
                src="https://maps.googleapis.com/maps/api/js?key=@(Program.ApiKeys.GoogleMaps)&callback=initMap">
            </script>
    }
    else
    {
        <div class="col-12 rounded bg-light text-muted text-center">
            @if (Model.HasSearched)
            {
                <div class="p-5">
                    <strong>We couldn't find any results for that search.</strong> Why not try another?
                </div>
            }
            else
            {
                <div class="p-5">Click <i class="fas fa-search"></i> to find local results.</div>
            }
        </div>
    }
</div>

<script>
// Request location automatically when the site loads.
requestLocation();
</script>